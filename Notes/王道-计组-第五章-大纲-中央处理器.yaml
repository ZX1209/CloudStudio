CPU的功能与结构:
    CPU的功能: 
        指令控制:
        操作控制:
        时间控制:
        数据加工:
        中断处理:
    CPU的基本结构:
        运算器:
            算术逻辑单元:
            暂存寄存器:
            累加寄存器:
            通用寄存器组:
            程序状态字寄存器:
            移位器:
            计数器:
        控制器:
            程序计数器(PC): 根据指令字长 编址
            指令寄存器:
            指令译码器:
            存储器地址寄存器:
            存储器数据寄存器:
            时序系统:
            微操作信号发生器:

指令执行过程:
    指令周期: 
        _描述: 不同指令的指令周期可能不同
        机械周期:
            时钟周期:
    指令周期的数据流:
        取址周期: [
            "PC->MAR->地址总线->主存",
            "CU发出控制信号->控制总线->主存",
            "主存->数据总线->MDR->IR",
            CU发出读命令->PC+1
        ]
        间址周期: [
            Ad(IR)(或MDR)->MAR->地址总线->主存,
            CU发出读命令->控制总线->主存,
            主存->数据总线->MDR,
            Ad(IR)表示取出IR中存放的指令字的地址字段,
        ]
        执行周期: 不同指令操作不同
        中断周期: [
            "假设程序断点存入堆栈中,并用SP指示栈顶地址,而且进栈操作是先修改栈顶指针后存入数据,数据流如下",
            CU控制将SP-1,SP->MAR->地址总线->主存,
            CU发出写命令->控制总线->主存,
            PC->MDR->数据总线->主存(程序断点存入主存),
            CU(中断服务程序的入口地址)->PC
        ]
    指令执行方案:
        单指令周期: 所有指令用相同执行时间完成,指令间串行执行
        多指令周期: 不同指令用不同步骤完成,指令之间串行执行
        流水线方案: 指令并行执行

数据通路的功能与基本结构:
    数据通路的功能: 在功能部件之间传送的路径称为数据通路,路径上的部件称为数据通路部件
    数据通路的基本结构: 
        _CPU内部总线:
        CPU内部单总线方式: 所有寄存器的输入端与输出端都连接到一条公共通路上
        CPU内部三总线方式: 所有寄存器的输入端与输出端都连接多条公共通路上,同时在多个总线上传输传输不同的数据
        专用数据通路方式: 根据指令执行过程中的数据和地址的流动方向安排线路
    寄存器之间的数据传送:
    主存与CPU之间的数据传送:
    执行算术或逻辑运算:
    _tmp: 数据通路结构直接影响CPU内各种信息的传送路径,数据通路不同,指令执行过程的微操作安排也不同,它关系着微操作信号形成部件的设计

控制器的功能和原理:
    _node: ?
    硬布线控制器:
        硬布线控制单元图: 操作译码器,节拍发成器,标志作为CU的外部输入
        硬布线控制器的时序系统及微操作: 各种周期
        CPU的控制方式:
            同步控制方式: 系统有统一的时钟
            异步控制方式: 各部件按自身速度工作,通过应答方式进行联络
            联合控制方式: 对不同的指令的微操作实行大部分采用同步控制,小部分采用异步控制方法
        硬布线控制单元设计步骤:
            列出微操作命令的操作时间表: 画表
            进行微操作信号综合: 构造控制信号
            画出微操作命令的逻辑图:
    微程序控制器:
        基本概念: 
            _描述: 将每条机械指令编写成一个微程序,每个微程序包含若干微指令,每条微指令对应一个或几个微操作命令;大多数计算机都采用微程序设计技术
            基本术语: 
                微命令与微操作: 一条机械指令可以分解成一个微操作序列,这些微操作是计算机中最基本,不可再分的操作;微命令与微操作一一对应;相容与互斥;
                微指令与微周期: [
                    微指令是若干微命令的集合,
                    存放微指令的控制存储器单元地址称为微地址,
                    一条微指令通常包含两大部分信息,
                    1操作控制字段:又称为操作码字段,用于产生某一步操作所需的各种操作控制信号 ,
                    2顺序控制字段:又称微地址码字段,用于控制产生下一条要执行的微指令地址 ,
                ]
                主存储器与控制存储器: 主存用于存放那个程序和数据,在CPU外部,用RAM实现;控制存储器(CM)用于存放微程序,在CPU内部,用ROM实现;
                程序和微程序: 程序是指令的有序几何,用于完成特定的功能;微程序是为指令的有序集合,一条指令的功能由一段微程序来实现
        组成和工作过程:
            基本组成: 比组合逻辑控制器多了,控制存储器,微指令寄存器,微地址形成部件,微地址寄存器
            工作过程:  执行取微指令公共操作(初始化,入口),由机器指令的操作码字段通过微程序控制器的控制下生成对应微程序入口并送入CMAR,从CM中逐条取出对应的微指令并执行,执行完后继续第一步
            微程序和机械指令: 通常一条机器指令对应一个微程序,由于任何一条机器指令的取值操作都是相同的,因此可将取指令操作统一编成一个微程序
        微指令的编码方式: 
            目的: 保证速度的情况下,尽量缩短微指令字长
            直接编码(直接控制方式): 微指令的微命令字段每一为都代表一个微命令,缺点是微指令字长过长
            字段直接编码方式: 将微指令的微命令字段分成若干小字段,把互斥性微命令组合在同一字段中,把相容性微命令组成在不同字段中,每个字段独立编码,每种编码代表一个微命令且各字段编码含义单独定义;可以缩短微指令字长,但需要译码电路,因此比直接编码方式慢
            字段间接编码方式: 一个字段的某些微命令需要由另一个字段中的某些微命令来解释;又称隐式编码,通常作为字段直接编码方式的一种辅助手段.
        微指令的地址形成方式:
            下地址段指出:
            机器指令操作码形成:
        微指令格式:
            水平型微指令: 指令字中一位对应一个控制信号
            垂直型微指令: 采用类似机器指令操作码的方式
            混合型微指令: 在垂直型的基础上增加一些不太复杂的并行操作
        微程序控制单元的设计步骤:
            写出对应机器指令的微操作命令及节拍安排:
            确定微指令格式: 根据微操作个数决定采用何种编码方式
            编写微指令码点:
        动态微程序设计和毫微程序设计: 
            动态微程序设计: 加入能根据用于的要求改变微程序,则这台机器就具有动态微程序设计功能;可采用可擦除可编程只读存储器(EPROM)实现
            毫微程序设计: 若应急拿不由微程序直接控制,而是通过存放在第二级控制存储器中的毫微程序来解释的,这个第二级控制存储器就称为毫微存储器,直接控制硬件的就是毫微微指令
        硬布线和微程序控制器的特点:
            硬布线控制器的特点: 速度快,难以添加功能 RISC
            微程序控制器的特点: 灵活,可维护,规整,相对速度慢 CISC